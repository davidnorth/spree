<% form_for(@product_group, :url => object_url, :html => { :id => 'product-group-form', :method => :put }) do |f| %>

  <% scopes_hash = @product_group.scopes_to_hash %>
  <% order_scope = scopes_hash.keys.select{|s| Scopes::Product::ORDERING.include?(s)}.last %>
  <fieldset>
    <legend><%= t(:product_group) %></legend>
    <% f.field_container :name do %>
      <%= f.label :name, t("name") %>
      <%= f.text_field :name %>
      <%= f.error_message_on :name %>
    <% end %>

    <% f.field_container :order_scope do %>
      <%= f.label :order_scope, t("sort_ordering") %>
      <%= select_tag("order_scope", options_for_select(
              Scopes::Product::ORDERING.collect{|p| [ t(:name, :scope =>[:product_scopes, :scopes, p]), p ] }, order_scope
      )) %>
    <% end %>
  </fieldset>


  <fieldset>
    <legend><%= t('scopes') %></legend>
    <table class="index">
    <% for product_scope in @product_group.product_scopes.not_ordering %>
      <tr id="<%= dom_id product_scope %>">
        <td>
          <label><%= t(:name, :scope => [:product_scopes, :scopes, product_scope.name]) %></label>
          <% if description = t(:description, :scope => [:product_scopes, :scopes, product_scope.name], :default => "") and description.present? %>
            <br /><%= description %>
          <% end %>
        </td>
        <td>
          <% if arguments = Scopes::Product.arguments_for_scope_name(product_scope.name.strip) %>
            <% arguments.each_with_index do |argument, i| %>
              <label><%= t(argument, :scope => [:product_scopes, :scopes, product_scope.name, :args]) %></label>
              <%= hidden_field_tag "product_group[product_scopes_attributes][][id]", product_scope.id %>
              <%= text_field_tag "product_group[product_scopes_attributes][][arguments][]", (product_scope.arguments || [])[i] %>
            <% end %>
          <% end %>
        </td>
        <td>
          <%= link_to_with_icon 'cross', '', admin_product_group_product_scope_path(@product_group, product_scope), 'data-remote' => true, 'data-method' => 'delete' %>
        </td>
      </tr>
    <% end -%>
    </table>
  </fieldset>



  <%=  button t("update") %>

<% end %>


<% form_tag(admin_product_group_product_scopes_path(@product_group)) do |f| %>

  <% 
  options = 
  grouped_options_for_select(
  Scopes::Product::SCOPES.map do |group_name, scopes|  
    [ 
      t(:name, :scope => [:product_scopes, :groups, group_name]), 
      scopes.keys.map do |scope_name|
        [ t(:name, :scope => [:product_scopes, :scopes, scope_name]), scope_name]
      end
    ]
  end
  ) 
  %>

  <p>
    <%= select_tag("product_scope[name]", options) %>
    <input type="submit" value="<%= t('add') %>" />
  </p>

<% end %>
